package auth.apple.app.model

import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName

/**
 * ref. https://developer.apple.com/documentation/sign_in_with_apple/generate_and_validate_tokens
 */
@Serializable
data class AuthPayload(
    /**
     * The identifier (App ID or Services ID) for your app. The identifier must not include your Team ID, to help mitigate the possiblity of exposing sensitive data to the end user. Authorization code and refresh token validation requests require this parameter.
     */
    @SerialName("client_id")
    val clientId: String,

    /**
     * A secret JSON Web Token, generated by the developer, that uses the Sign in with Apple private key associated with your developer account. Authorization code and refresh token validation requests require this parameter.
     */
    @SerialName("client_secret")
    val clientSecret: String,

    /**
     * The grant type determines how the client app interacts with the validation server. Authorization code and refresh token validation requests require this parameter. For authorization code validation, use authorization_code. For refresh token validation requests, use refresh_token.
     */
    @SerialName("grant_type")
    val grantType: String,

    /**
     * The authorization code received in an authorization response sent to your app. The code is single-use only and valid for five minutes. Authorization code validation requests require this parameter.
     */
    @SerialName("code")
    val code: String? = null,

    /**
     * The refresh token received from the validation server during a authorization request. Refresh token validation requests require this parameter.
     */
    @SerialName("refresh_token")
    val refreshToken: String? = null,

    /**
     * The destination URI provided in the authorization request when authorizing a user with your app, if applicable. The URI must use the HTTPS protocol, include a domain name, and cannot contain an IP address or localhost. Authorization code requests require this parameter.
     */
    @SerialName("redirect_uri")
    val redirectUri: String? = null,
)